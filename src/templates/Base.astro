---
import '@styles/custom.css';

import { Footer } from '@partials/Footer';
import { Navbar } from '@partials/Navbar';
import { AppConfig } from '@utils/AppConfig';
import { schemaMarkup } from '@utils/schemaMarkup';

export interface Props {
  head: {
    title: string;
    description: string;
  };
}

const {
  head: { title, description },
} = Astro.props as Props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="author" content={AppConfig.author} />
    <meta name="keywords" content={AppConfig.keywords} />
    <link rel="alternate" type="application/rss+xml" href="/rss.xml" />
    <link rel="icon" type="image/x-icon" href="/assets/images/favicon.png" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/gh/devicons/devicon@v2.15.1/devicon.min.css"
    />
  </head>
  <body class="bg-slate-200 text-gray-950 dark:bg-slate-800 dark:text-gray-100">
    <Navbar />

    <slot />

    <Footer />
    <script>
      // On page load or when changing themes, best to add inline in `head` to avoid FOUC
      if (
        localStorage.getItem('color-theme') === 'dark' ||
        (!('color-theme' in localStorage) &&
          window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }

      var themeToggleDarkIcon = document.getElementById(
        'theme-toggle-dark-icon'
      );
      var themeToggleLightIcon = document.getElementById(
        'theme-toggle-light-icon'
      );

      // Change the icons inside the button based on previous settings
      if (
        localStorage.getItem('color-theme') === 'dark' ||
        (!('color-theme' in localStorage) &&
          window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        themeToggleLightIcon.classList.remove('hidden');
      } else {
        themeToggleDarkIcon.classList.remove('hidden');
      }

      var themeToggleBtn = document.getElementById('theme-toggle');

      themeToggleBtn.addEventListener('click', function () {
        // toggle icons inside button
        themeToggleDarkIcon.classList.toggle('hidden');
        themeToggleLightIcon.classList.toggle('hidden');

        // if set via local storage previously
        if (localStorage.getItem('color-theme')) {
          if (localStorage.getItem('color-theme') === 'light') {
            document.documentElement.classList.add('dark');
            localStorage.setItem('color-theme', 'dark');
          } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('color-theme', 'light');
          }

          // if NOT set via local storage previously
        } else {
          if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('color-theme', 'light');
          } else {
            document.documentElement.classList.add('dark');
            localStorage.setItem('color-theme', 'dark');
          }
        }
      });
    </script>
    <script type="application/ld+json" set:html={JSON.stringify(schemaMarkup)} />
  </body>
</html>
